// Code generated by protoc-gen-kore. DO NOT EDIT.

package measurement_unit

import (
	context "context"
	_ "embed"
	constant "github.com/tmds-io/masterdata/contract/constant"
	masker "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/masker"
	sanitizer "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/sanitizer"
	validator "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/validator"
	client "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/client"
	errors "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/errors"
	server "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/server"
)

// Client API for MeasurementUnitHandler service

const MeasurementUnitHandlerRegistryServiceName = constant.RegistryServiceName + ".measurement_unit_handler"

type MeasurementUnitHandlerService interface {
	CreateMeasurementUnit(ctx context.Context, in *CreateMeasurementUnitRequest, opts ...client.CallOption) (*CreateMeasurementUnitResponse, error)
	ReadMeasurementUnit(ctx context.Context, in *ReadMeasurementUnitRequest, opts ...client.CallOption) (*ReadMeasurementUnitResponse, error)
	UpdateMeasurementUnit(ctx context.Context, in *UpdateMeasurementUnitRequest, opts ...client.CallOption) (*UpdateMeasurementUnitResponse, error)
	DeleteMeasurementUnit(ctx context.Context, in *DeleteMeasurementUnitRequest, opts ...client.CallOption) (*DeleteMeasurementUnitResponse, error)
	SearchMeasurementUnits(ctx context.Context, in *SearchMeasurementUnitsRequest, opts ...client.CallOption) (*SearchMeasurementUnitsResponse, error)
}

type measurementUnitHandlerService struct {
	c    client.Client
	name string
}

func NewMeasurementUnitHandlerService(name string, c client.Client) MeasurementUnitHandlerService {
	return &measurementUnitHandlerService{
		c:    c,
		name: name,
	}
}

func NewMeasurementUnitHandlerServiceDefault(clt ...client.Client) MeasurementUnitHandlerService {
	if 0 == len(clt) {
		clt = []client.Client{client.DefaultClient}
	}
	return NewMeasurementUnitHandlerService(constant.RegistryServiceName, clt[0])
}

func NewMeasurementUnitHandlerServiceWithDefaultClient() MeasurementUnitHandlerService {
	return NewMeasurementUnitHandlerService(constant.RegistryServiceName, client.DefaultClient)
}

func (c *measurementUnitHandlerService) CreateMeasurementUnit(ctx context.Context, in *CreateMeasurementUnitRequest, opts ...client.CallOption) (*CreateMeasurementUnitResponse, error) {
	req := c.c.NewRequest(c.name, "MeasurementUnitHandler.CreateMeasurementUnit", in)
	out := new(CreateMeasurementUnitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementUnitHandlerService) ReadMeasurementUnit(ctx context.Context, in *ReadMeasurementUnitRequest, opts ...client.CallOption) (*ReadMeasurementUnitResponse, error) {
	req := c.c.NewRequest(c.name, "MeasurementUnitHandler.ReadMeasurementUnit", in)
	out := new(ReadMeasurementUnitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementUnitHandlerService) UpdateMeasurementUnit(ctx context.Context, in *UpdateMeasurementUnitRequest, opts ...client.CallOption) (*UpdateMeasurementUnitResponse, error) {
	req := c.c.NewRequest(c.name, "MeasurementUnitHandler.UpdateMeasurementUnit", in)
	out := new(UpdateMeasurementUnitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementUnitHandlerService) DeleteMeasurementUnit(ctx context.Context, in *DeleteMeasurementUnitRequest, opts ...client.CallOption) (*DeleteMeasurementUnitResponse, error) {
	req := c.c.NewRequest(c.name, "MeasurementUnitHandler.DeleteMeasurementUnit", in)
	out := new(DeleteMeasurementUnitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementUnitHandlerService) SearchMeasurementUnits(ctx context.Context, in *SearchMeasurementUnitsRequest, opts ...client.CallOption) (*SearchMeasurementUnitsResponse, error) {
	req := c.c.NewRequest(c.name, "MeasurementUnitHandler.SearchMeasurementUnits", in)
	out := new(SearchMeasurementUnitsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MeasurementUnitHandler service

// MeasurementUnitHandlerHandler is the server API for MeasurementUnitHandler service.
type MeasurementUnitHandlerHandler interface {
	CreateMeasurementUnit(context.Context, *CreateMeasurementUnitRequest, *CreateMeasurementUnitResponse) error
	ReadMeasurementUnit(context.Context, *ReadMeasurementUnitRequest, *ReadMeasurementUnitResponse) error
	UpdateMeasurementUnit(context.Context, *UpdateMeasurementUnitRequest, *UpdateMeasurementUnitResponse) error
	DeleteMeasurementUnit(context.Context, *DeleteMeasurementUnitRequest, *DeleteMeasurementUnitResponse) error
	SearchMeasurementUnits(context.Context, *SearchMeasurementUnitsRequest, *SearchMeasurementUnitsResponse) error
}

func RegisterMeasurementUnitHandlerHandler(s server.Server, hdlr MeasurementUnitHandlerHandler, opts ...server.HandlerOption) error {
	type measurementUnitHandler interface {
		CreateMeasurementUnit(ctx context.Context, in *CreateMeasurementUnitRequest, out *CreateMeasurementUnitResponse) error
		ReadMeasurementUnit(ctx context.Context, in *ReadMeasurementUnitRequest, out *ReadMeasurementUnitResponse) error
		UpdateMeasurementUnit(ctx context.Context, in *UpdateMeasurementUnitRequest, out *UpdateMeasurementUnitResponse) error
		DeleteMeasurementUnit(ctx context.Context, in *DeleteMeasurementUnitRequest, out *DeleteMeasurementUnitResponse) error
		SearchMeasurementUnits(ctx context.Context, in *SearchMeasurementUnitsRequest, out *SearchMeasurementUnitsResponse) error
	}
	type MeasurementUnitHandler struct {
		measurementUnitHandler
	}
	h := &measurementUnitHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&MeasurementUnitHandler{h}, opts...))
}

type measurementUnitHandlerHandler struct {
	MeasurementUnitHandlerHandler
}

//go:embed validation/measurement_unit_handler.create_measurement_unit.yaml
var ValidationTplOfCreateMeasurementUnitRequest string

//go:embed mask/measurement_unit_handler.create_measurement_unit.yaml
var MaskOfCreateMeasurementUnitRequest string

func (in *CreateMeasurementUnitRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfCreateMeasurementUnitRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfCreateMeasurementUnitRequest))
}

//go:embed validation/measurement_unit_handler.read_measurement_unit.yaml
var ValidationTplOfReadMeasurementUnitRequest string

//go:embed mask/measurement_unit_handler.read_measurement_unit.yaml
var MaskOfReadMeasurementUnitRequest string

func (in *ReadMeasurementUnitRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfReadMeasurementUnitRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfReadMeasurementUnitRequest))
}

//go:embed validation/measurement_unit_handler.update_measurement_unit.yaml
var ValidationTplOfUpdateMeasurementUnitRequest string

//go:embed mask/measurement_unit_handler.update_measurement_unit.yaml
var MaskOfUpdateMeasurementUnitRequest string

func (in *UpdateMeasurementUnitRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfUpdateMeasurementUnitRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfUpdateMeasurementUnitRequest))
}

//go:embed validation/measurement_unit_handler.delete_measurement_unit.yaml
var ValidationTplOfDeleteMeasurementUnitRequest string

//go:embed mask/measurement_unit_handler.delete_measurement_unit.yaml
var MaskOfDeleteMeasurementUnitRequest string

func (in *DeleteMeasurementUnitRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfDeleteMeasurementUnitRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfDeleteMeasurementUnitRequest))
}

//go:embed validation/measurement_unit_handler.search_measurement_units.yaml
var ValidationTplOfSearchMeasurementUnitsRequest string

//go:embed mask/measurement_unit_handler.search_measurement_units.yaml
var MaskOfSearchMeasurementUnitsRequest string

func (in *SearchMeasurementUnitsRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfSearchMeasurementUnitsRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfSearchMeasurementUnitsRequest))
}

func (h *measurementUnitHandlerHandler) CreateMeasurementUnit(ctx context.Context, in *CreateMeasurementUnitRequest, out *CreateMeasurementUnitResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.MeasurementUnitHandlerHandler.CreateMeasurementUnit(ctx, in, out)
}

func (h *measurementUnitHandlerHandler) ReadMeasurementUnit(ctx context.Context, in *ReadMeasurementUnitRequest, out *ReadMeasurementUnitResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.MeasurementUnitHandlerHandler.ReadMeasurementUnit(ctx, in, out)
}

func (h *measurementUnitHandlerHandler) UpdateMeasurementUnit(ctx context.Context, in *UpdateMeasurementUnitRequest, out *UpdateMeasurementUnitResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.MeasurementUnitHandlerHandler.UpdateMeasurementUnit(ctx, in, out)
}

func (h *measurementUnitHandlerHandler) DeleteMeasurementUnit(ctx context.Context, in *DeleteMeasurementUnitRequest, out *DeleteMeasurementUnitResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.MeasurementUnitHandlerHandler.DeleteMeasurementUnit(ctx, in, out)
}

func (h *measurementUnitHandlerHandler) SearchMeasurementUnits(ctx context.Context, in *SearchMeasurementUnitsRequest, out *SearchMeasurementUnitsResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.MeasurementUnitHandlerHandler.SearchMeasurementUnits(ctx, in, out)
}
