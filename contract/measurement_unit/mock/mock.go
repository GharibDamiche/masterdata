// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tmds-io/masterdata/contract/measurement_unit (interfaces: MeasurementUnitHandlerService)

// Package mock_measurement_unit is a generated GoMock package.
package mock_measurement_unit

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	measurement_unit "github.com/tmds-io/masterdata/contract/measurement_unit"
	client "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/client"
)

// MockMeasurementUnitHandlerService is a mock of MeasurementUnitHandlerService interface.
type MockMeasurementUnitHandlerService struct {
	ctrl     *gomock.Controller
	recorder *MockMeasurementUnitHandlerServiceMockRecorder
}

// MockMeasurementUnitHandlerServiceMockRecorder is the mock recorder for MockMeasurementUnitHandlerService.
type MockMeasurementUnitHandlerServiceMockRecorder struct {
	mock *MockMeasurementUnitHandlerService
}

// NewMockMeasurementUnitHandlerService creates a new mock instance.
func NewMockMeasurementUnitHandlerService(ctrl *gomock.Controller) *MockMeasurementUnitHandlerService {
	mock := &MockMeasurementUnitHandlerService{ctrl: ctrl}
	mock.recorder = &MockMeasurementUnitHandlerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeasurementUnitHandlerService) EXPECT() *MockMeasurementUnitHandlerServiceMockRecorder {
	return m.recorder
}

// CreateMeasurementUnit mocks base method.
func (m *MockMeasurementUnitHandlerService) CreateMeasurementUnit(arg0 context.Context, arg1 *measurement_unit.CreateMeasurementUnitRequest, arg2 ...client.CallOption) (*measurement_unit.CreateMeasurementUnitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMeasurementUnit", varargs...)
	ret0, _ := ret[0].(*measurement_unit.CreateMeasurementUnitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeasurementUnit indicates an expected call of CreateMeasurementUnit.
func (mr *MockMeasurementUnitHandlerServiceMockRecorder) CreateMeasurementUnit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeasurementUnit", reflect.TypeOf((*MockMeasurementUnitHandlerService)(nil).CreateMeasurementUnit), varargs...)
}

// DeleteMeasurementUnit mocks base method.
func (m *MockMeasurementUnitHandlerService) DeleteMeasurementUnit(arg0 context.Context, arg1 *measurement_unit.DeleteMeasurementUnitRequest, arg2 ...client.CallOption) (*measurement_unit.DeleteMeasurementUnitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMeasurementUnit", varargs...)
	ret0, _ := ret[0].(*measurement_unit.DeleteMeasurementUnitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMeasurementUnit indicates an expected call of DeleteMeasurementUnit.
func (mr *MockMeasurementUnitHandlerServiceMockRecorder) DeleteMeasurementUnit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeasurementUnit", reflect.TypeOf((*MockMeasurementUnitHandlerService)(nil).DeleteMeasurementUnit), varargs...)
}

// ReadMeasurementUnit mocks base method.
func (m *MockMeasurementUnitHandlerService) ReadMeasurementUnit(arg0 context.Context, arg1 *measurement_unit.ReadMeasurementUnitRequest, arg2 ...client.CallOption) (*measurement_unit.ReadMeasurementUnitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadMeasurementUnit", varargs...)
	ret0, _ := ret[0].(*measurement_unit.ReadMeasurementUnitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMeasurementUnit indicates an expected call of ReadMeasurementUnit.
func (mr *MockMeasurementUnitHandlerServiceMockRecorder) ReadMeasurementUnit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMeasurementUnit", reflect.TypeOf((*MockMeasurementUnitHandlerService)(nil).ReadMeasurementUnit), varargs...)
}

// SearchMeasurementUnits mocks base method.
func (m *MockMeasurementUnitHandlerService) SearchMeasurementUnits(arg0 context.Context, arg1 *measurement_unit.SearchMeasurementUnitsRequest, arg2 ...client.CallOption) (*measurement_unit.SearchMeasurementUnitsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMeasurementUnits", varargs...)
	ret0, _ := ret[0].(*measurement_unit.SearchMeasurementUnitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMeasurementUnits indicates an expected call of SearchMeasurementUnits.
func (mr *MockMeasurementUnitHandlerServiceMockRecorder) SearchMeasurementUnits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMeasurementUnits", reflect.TypeOf((*MockMeasurementUnitHandlerService)(nil).SearchMeasurementUnits), varargs...)
}

// UpdateMeasurementUnit mocks base method.
func (m *MockMeasurementUnitHandlerService) UpdateMeasurementUnit(arg0 context.Context, arg1 *measurement_unit.UpdateMeasurementUnitRequest, arg2 ...client.CallOption) (*measurement_unit.UpdateMeasurementUnitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMeasurementUnit", varargs...)
	ret0, _ := ret[0].(*measurement_unit.UpdateMeasurementUnitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeasurementUnit indicates an expected call of UpdateMeasurementUnit.
func (mr *MockMeasurementUnitHandlerServiceMockRecorder) UpdateMeasurementUnit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeasurementUnit", reflect.TypeOf((*MockMeasurementUnitHandlerService)(nil).UpdateMeasurementUnit), varargs...)
}
