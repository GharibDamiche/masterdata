// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tmds-io/masterdata/contract/data_definition (interfaces: DataDefinitionHandlerService)

// Package mock_data_definition is a generated GoMock package.
package mock_data_definition

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data_definition "github.com/tmds-io/masterdata/contract/data_definition"
	client "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/client"
)

// MockDataDefinitionHandlerService is a mock of DataDefinitionHandlerService interface.
type MockDataDefinitionHandlerService struct {
	ctrl     *gomock.Controller
	recorder *MockDataDefinitionHandlerServiceMockRecorder
}

// MockDataDefinitionHandlerServiceMockRecorder is the mock recorder for MockDataDefinitionHandlerService.
type MockDataDefinitionHandlerServiceMockRecorder struct {
	mock *MockDataDefinitionHandlerService
}

// NewMockDataDefinitionHandlerService creates a new mock instance.
func NewMockDataDefinitionHandlerService(ctrl *gomock.Controller) *MockDataDefinitionHandlerService {
	mock := &MockDataDefinitionHandlerService{ctrl: ctrl}
	mock.recorder = &MockDataDefinitionHandlerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataDefinitionHandlerService) EXPECT() *MockDataDefinitionHandlerServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDataDefinitionHandlerService) Delete(arg0 context.Context, arg1 *data_definition.DeleteDataDefinitionRequest, arg2 ...client.CallOption) (*data_definition.DeleteDataDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*data_definition.DeleteDataDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDataDefinitionHandlerServiceMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataDefinitionHandlerService)(nil).Delete), varargs...)
}

// Read mocks base method.
func (m *MockDataDefinitionHandlerService) Read(arg0 context.Context, arg1 *data_definition.ReadDataDefinitionRequest, arg2 ...client.CallOption) (*data_definition.ReadDataDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*data_definition.ReadDataDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDataDefinitionHandlerServiceMockRecorder) Read(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDataDefinitionHandlerService)(nil).Read), varargs...)
}

// Save mocks base method.
func (m *MockDataDefinitionHandlerService) Save(arg0 context.Context, arg1 *data_definition.SaveDataDefinitionRequest, arg2 ...client.CallOption) (*data_definition.SaveDataDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(*data_definition.SaveDataDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockDataDefinitionHandlerServiceMockRecorder) Save(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDataDefinitionHandlerService)(nil).Save), varargs...)
}

// Search mocks base method.
func (m *MockDataDefinitionHandlerService) Search(arg0 context.Context, arg1 *data_definition.SearchDataDefinitionRequest, arg2 ...client.CallOption) (*data_definition.SearchDataDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*data_definition.SearchDataDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDataDefinitionHandlerServiceMockRecorder) Search(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataDefinitionHandlerService)(nil).Search), varargs...)
}
