// Code generated by protoc-gen-kore. DO NOT EDIT.

package data_value

import (
	context "context"
	_ "embed"
	constant "github.com/tmds-io/masterdata/contract/constant"
	masker "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/masker"
	sanitizer "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/sanitizer"
	validator "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/validator"
	client "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/client"
	errors "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/errors"
	server "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/server"
)

// Client API for DataValueHandler service

const DataValueHandlerRegistryServiceName = constant.RegistryServiceName + ".data_value_handler"

type DataValueHandlerService interface {
	GenerateDataValueVariations(ctx context.Context, in *GenerateDataValueVariationsRequest, opts ...client.CallOption) (*GenerateDataValueVariationsResponse, error)
	ConfigureDataValue(ctx context.Context, in *ConfigureDataValueRequest, opts ...client.CallOption) (*ConfigureDataValueResponse, error)
	ReadDataValue(ctx context.Context, in *ReadDataValueRequest, opts ...client.CallOption) (*ReadDataValueResponse, error)
	SearchDataValue(ctx context.Context, in *SearchDataValueRequest, opts ...client.CallOption) (*SearchDataValueResponse, error)
	UpdateDataValue(ctx context.Context, in *UpdateDataValueRequest, opts ...client.CallOption) (*UpdateDataValueResponse, error)
	DeleteDataValue(ctx context.Context, in *DeleteDataValueRequest, opts ...client.CallOption) (*DeleteDataValueResponse, error)
}

type dataValueHandlerService struct {
	c    client.Client
	name string
}

func NewDataValueHandlerService(name string, c client.Client) DataValueHandlerService {
	return &dataValueHandlerService{
		c:    c,
		name: name,
	}
}

func NewDataValueHandlerServiceDefault(clt ...client.Client) DataValueHandlerService {
	if 0 == len(clt) {
		clt = []client.Client{client.DefaultClient}
	}
	return NewDataValueHandlerService(constant.RegistryServiceName, clt[0])
}

func NewDataValueHandlerServiceWithDefaultClient() DataValueHandlerService {
	return NewDataValueHandlerService(constant.RegistryServiceName, client.DefaultClient)
}

func (c *dataValueHandlerService) GenerateDataValueVariations(ctx context.Context, in *GenerateDataValueVariationsRequest, opts ...client.CallOption) (*GenerateDataValueVariationsResponse, error) {
	req := c.c.NewRequest(c.name, "DataValueHandler.GenerateDataValueVariations", in)
	out := new(GenerateDataValueVariationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataValueHandlerService) ConfigureDataValue(ctx context.Context, in *ConfigureDataValueRequest, opts ...client.CallOption) (*ConfigureDataValueResponse, error) {
	req := c.c.NewRequest(c.name, "DataValueHandler.ConfigureDataValue", in)
	out := new(ConfigureDataValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataValueHandlerService) ReadDataValue(ctx context.Context, in *ReadDataValueRequest, opts ...client.CallOption) (*ReadDataValueResponse, error) {
	req := c.c.NewRequest(c.name, "DataValueHandler.ReadDataValue", in)
	out := new(ReadDataValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataValueHandlerService) SearchDataValue(ctx context.Context, in *SearchDataValueRequest, opts ...client.CallOption) (*SearchDataValueResponse, error) {
	req := c.c.NewRequest(c.name, "DataValueHandler.SearchDataValue", in)
	out := new(SearchDataValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataValueHandlerService) UpdateDataValue(ctx context.Context, in *UpdateDataValueRequest, opts ...client.CallOption) (*UpdateDataValueResponse, error) {
	req := c.c.NewRequest(c.name, "DataValueHandler.UpdateDataValue", in)
	out := new(UpdateDataValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataValueHandlerService) DeleteDataValue(ctx context.Context, in *DeleteDataValueRequest, opts ...client.CallOption) (*DeleteDataValueResponse, error) {
	req := c.c.NewRequest(c.name, "DataValueHandler.DeleteDataValue", in)
	out := new(DeleteDataValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataValueHandler service

// DataValueHandlerHandler is the server API for DataValueHandler service.
type DataValueHandlerHandler interface {
	GenerateDataValueVariations(context.Context, *GenerateDataValueVariationsRequest, *GenerateDataValueVariationsResponse) error
	ConfigureDataValue(context.Context, *ConfigureDataValueRequest, *ConfigureDataValueResponse) error
	ReadDataValue(context.Context, *ReadDataValueRequest, *ReadDataValueResponse) error
	SearchDataValue(context.Context, *SearchDataValueRequest, *SearchDataValueResponse) error
	UpdateDataValue(context.Context, *UpdateDataValueRequest, *UpdateDataValueResponse) error
	DeleteDataValue(context.Context, *DeleteDataValueRequest, *DeleteDataValueResponse) error
}

func RegisterDataValueHandlerHandler(s server.Server, hdlr DataValueHandlerHandler, opts ...server.HandlerOption) error {
	type dataValueHandler interface {
		GenerateDataValueVariations(ctx context.Context, in *GenerateDataValueVariationsRequest, out *GenerateDataValueVariationsResponse) error
		ConfigureDataValue(ctx context.Context, in *ConfigureDataValueRequest, out *ConfigureDataValueResponse) error
		ReadDataValue(ctx context.Context, in *ReadDataValueRequest, out *ReadDataValueResponse) error
		SearchDataValue(ctx context.Context, in *SearchDataValueRequest, out *SearchDataValueResponse) error
		UpdateDataValue(ctx context.Context, in *UpdateDataValueRequest, out *UpdateDataValueResponse) error
		DeleteDataValue(ctx context.Context, in *DeleteDataValueRequest, out *DeleteDataValueResponse) error
	}
	type DataValueHandler struct {
		dataValueHandler
	}
	h := &dataValueHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&DataValueHandler{h}, opts...))
}

type dataValueHandlerHandler struct {
	DataValueHandlerHandler
}

//go:embed validation/data_value_handler.generate_data_value_variations.yaml
var ValidationTplOfGenerateDataValueVariationsRequest string

//go:embed mask/data_value_handler.generate_data_value_variations.yaml
var MaskOfGenerateDataValueVariationsRequest string

func (in *GenerateDataValueVariationsRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfGenerateDataValueVariationsRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfGenerateDataValueVariationsRequest))
}

//go:embed validation/data_value_handler.configure_data_value.yaml
var ValidationTplOfConfigureDataValueRequest string

//go:embed mask/data_value_handler.configure_data_value.yaml
var MaskOfConfigureDataValueRequest string

func (in *ConfigureDataValueRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfConfigureDataValueRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfConfigureDataValueRequest))
}

//go:embed validation/data_value_handler.read_data_value.yaml
var ValidationTplOfReadDataValueRequest string

//go:embed mask/data_value_handler.read_data_value.yaml
var MaskOfReadDataValueRequest string

func (in *ReadDataValueRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfReadDataValueRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfReadDataValueRequest))
}

//go:embed validation/data_value_handler.search_data_value.yaml
var ValidationTplOfSearchDataValueRequest string

//go:embed mask/data_value_handler.search_data_value.yaml
var MaskOfSearchDataValueRequest string

func (in *SearchDataValueRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfSearchDataValueRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfSearchDataValueRequest))
}

//go:embed validation/data_value_handler.update_data_value.yaml
var ValidationTplOfUpdateDataValueRequest string

//go:embed mask/data_value_handler.update_data_value.yaml
var MaskOfUpdateDataValueRequest string

func (in *UpdateDataValueRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfUpdateDataValueRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfUpdateDataValueRequest))
}

//go:embed validation/data_value_handler.delete_data_value.yaml
var ValidationTplOfDeleteDataValueRequest string

//go:embed mask/data_value_handler.delete_data_value.yaml
var MaskOfDeleteDataValueRequest string

func (in *DeleteDataValueRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfDeleteDataValueRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfDeleteDataValueRequest))
}

func (h *dataValueHandlerHandler) GenerateDataValueVariations(ctx context.Context, in *GenerateDataValueVariationsRequest, out *GenerateDataValueVariationsResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.DataValueHandlerHandler.GenerateDataValueVariations(ctx, in, out)
}

func (h *dataValueHandlerHandler) ConfigureDataValue(ctx context.Context, in *ConfigureDataValueRequest, out *ConfigureDataValueResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.DataValueHandlerHandler.ConfigureDataValue(ctx, in, out)
}

func (h *dataValueHandlerHandler) ReadDataValue(ctx context.Context, in *ReadDataValueRequest, out *ReadDataValueResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.DataValueHandlerHandler.ReadDataValue(ctx, in, out)
}

func (h *dataValueHandlerHandler) SearchDataValue(ctx context.Context, in *SearchDataValueRequest, out *SearchDataValueResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.DataValueHandlerHandler.SearchDataValue(ctx, in, out)
}

func (h *dataValueHandlerHandler) UpdateDataValue(ctx context.Context, in *UpdateDataValueRequest, out *UpdateDataValueResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.DataValueHandlerHandler.UpdateDataValue(ctx, in, out)
}

func (h *dataValueHandlerHandler) DeleteDataValue(ctx context.Context, in *DeleteDataValueRequest, out *DeleteDataValueResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.DataValueHandlerHandler.DeleteDataValue(ctx, in, out)
}
