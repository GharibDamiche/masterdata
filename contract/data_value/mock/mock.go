// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tmds-io/masterdata/contract/data_value (interfaces: DataValueHandlerService)

// Package mock_data_value is a generated GoMock package.
package mock_data_value

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data_value "github.com/tmds-io/masterdata/contract/data_value"
	client "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/client"
)

// MockDataValueHandlerService is a mock of DataValueHandlerService interface.
type MockDataValueHandlerService struct {
	ctrl     *gomock.Controller
	recorder *MockDataValueHandlerServiceMockRecorder
}

// MockDataValueHandlerServiceMockRecorder is the mock recorder for MockDataValueHandlerService.
type MockDataValueHandlerServiceMockRecorder struct {
	mock *MockDataValueHandlerService
}

// NewMockDataValueHandlerService creates a new mock instance.
func NewMockDataValueHandlerService(ctrl *gomock.Controller) *MockDataValueHandlerService {
	mock := &MockDataValueHandlerService{ctrl: ctrl}
	mock.recorder = &MockDataValueHandlerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataValueHandlerService) EXPECT() *MockDataValueHandlerServiceMockRecorder {
	return m.recorder
}

// ConfigureDataValue mocks base method.
func (m *MockDataValueHandlerService) ConfigureDataValue(arg0 context.Context, arg1 *data_value.ConfigureDataValueRequest, arg2 ...client.CallOption) (*data_value.ConfigureDataValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigureDataValue", varargs...)
	ret0, _ := ret[0].(*data_value.ConfigureDataValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureDataValue indicates an expected call of ConfigureDataValue.
func (mr *MockDataValueHandlerServiceMockRecorder) ConfigureDataValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDataValue", reflect.TypeOf((*MockDataValueHandlerService)(nil).ConfigureDataValue), varargs...)
}

// DeleteDataValue mocks base method.
func (m *MockDataValueHandlerService) DeleteDataValue(arg0 context.Context, arg1 *data_value.DeleteDataValueRequest, arg2 ...client.CallOption) (*data_value.DeleteDataValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataValue", varargs...)
	ret0, _ := ret[0].(*data_value.DeleteDataValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataValue indicates an expected call of DeleteDataValue.
func (mr *MockDataValueHandlerServiceMockRecorder) DeleteDataValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataValue", reflect.TypeOf((*MockDataValueHandlerService)(nil).DeleteDataValue), varargs...)
}

// GenerateDataValueVariations mocks base method.
func (m *MockDataValueHandlerService) GenerateDataValueVariations(arg0 context.Context, arg1 *data_value.GenerateDataValueVariationsRequest, arg2 ...client.CallOption) (*data_value.GenerateDataValueVariationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateDataValueVariations", varargs...)
	ret0, _ := ret[0].(*data_value.GenerateDataValueVariationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDataValueVariations indicates an expected call of GenerateDataValueVariations.
func (mr *MockDataValueHandlerServiceMockRecorder) GenerateDataValueVariations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDataValueVariations", reflect.TypeOf((*MockDataValueHandlerService)(nil).GenerateDataValueVariations), varargs...)
}

// ReadDataValue mocks base method.
func (m *MockDataValueHandlerService) ReadDataValue(arg0 context.Context, arg1 *data_value.ReadDataValueRequest, arg2 ...client.CallOption) (*data_value.ReadDataValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDataValue", varargs...)
	ret0, _ := ret[0].(*data_value.ReadDataValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDataValue indicates an expected call of ReadDataValue.
func (mr *MockDataValueHandlerServiceMockRecorder) ReadDataValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDataValue", reflect.TypeOf((*MockDataValueHandlerService)(nil).ReadDataValue), varargs...)
}

// SearchDataValue mocks base method.
func (m *MockDataValueHandlerService) SearchDataValue(arg0 context.Context, arg1 *data_value.SearchDataValueRequest, arg2 ...client.CallOption) (*data_value.SearchDataValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchDataValue", varargs...)
	ret0, _ := ret[0].(*data_value.SearchDataValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDataValue indicates an expected call of SearchDataValue.
func (mr *MockDataValueHandlerServiceMockRecorder) SearchDataValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDataValue", reflect.TypeOf((*MockDataValueHandlerService)(nil).SearchDataValue), varargs...)
}

// UpdateDataValue mocks base method.
func (m *MockDataValueHandlerService) UpdateDataValue(arg0 context.Context, arg1 *data_value.UpdateDataValueRequest, arg2 ...client.CallOption) (*data_value.UpdateDataValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataValue", varargs...)
	ret0, _ := ret[0].(*data_value.UpdateDataValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataValue indicates an expected call of UpdateDataValue.
func (mr *MockDataValueHandlerServiceMockRecorder) UpdateDataValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataValue", reflect.TypeOf((*MockDataValueHandlerService)(nil).UpdateDataValue), varargs...)
}
