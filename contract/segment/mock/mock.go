// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tmds-io/masterdata/contract/segment (interfaces: SegmentHandlerService)

// Package mock_segment is a generated GoMock package.
package mock_segment

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	segment "github.com/tmds-io/masterdata/contract/segment"
	client "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/client"
)

// MockSegmentHandlerService is a mock of SegmentHandlerService interface.
type MockSegmentHandlerService struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentHandlerServiceMockRecorder
}

// MockSegmentHandlerServiceMockRecorder is the mock recorder for MockSegmentHandlerService.
type MockSegmentHandlerServiceMockRecorder struct {
	mock *MockSegmentHandlerService
}

// NewMockSegmentHandlerService creates a new mock instance.
func NewMockSegmentHandlerService(ctrl *gomock.Controller) *MockSegmentHandlerService {
	mock := &MockSegmentHandlerService{ctrl: ctrl}
	mock.recorder = &MockSegmentHandlerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentHandlerService) EXPECT() *MockSegmentHandlerServiceMockRecorder {
	return m.recorder
}

// AddChildSegmentValue mocks base method.
func (m *MockSegmentHandlerService) AddChildSegmentValue(arg0 context.Context, arg1 *segment.AddChildSegmentValueRequest, arg2 ...client.CallOption) (*segment.AddChildSegmentValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddChildSegmentValue", varargs...)
	ret0, _ := ret[0].(*segment.AddChildSegmentValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChildSegmentValue indicates an expected call of AddChildSegmentValue.
func (mr *MockSegmentHandlerServiceMockRecorder) AddChildSegmentValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildSegmentValue", reflect.TypeOf((*MockSegmentHandlerService)(nil).AddChildSegmentValue), varargs...)
}

// CreateSegment mocks base method.
func (m *MockSegmentHandlerService) CreateSegment(arg0 context.Context, arg1 *segment.CreateSegmentRequest, arg2 ...client.CallOption) (*segment.CreateSegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSegment", varargs...)
	ret0, _ := ret[0].(*segment.CreateSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentHandlerServiceMockRecorder) CreateSegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentHandlerService)(nil).CreateSegment), varargs...)
}

// DeleteSegment mocks base method.
func (m *MockSegmentHandlerService) DeleteSegment(arg0 context.Context, arg1 *segment.DeleteSegmentRequest, arg2 ...client.CallOption) (*segment.DeleteSegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSegment", varargs...)
	ret0, _ := ret[0].(*segment.DeleteSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentHandlerServiceMockRecorder) DeleteSegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegmentHandlerService)(nil).DeleteSegment), varargs...)
}

// ListSegments mocks base method.
func (m *MockSegmentHandlerService) ListSegments(arg0 context.Context, arg1 *segment.SearchSegmentsRequest, arg2 ...client.CallOption) (*segment.SearchSegmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSegments", varargs...)
	ret0, _ := ret[0].(*segment.SearchSegmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSegments indicates an expected call of ListSegments.
func (mr *MockSegmentHandlerServiceMockRecorder) ListSegments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegments", reflect.TypeOf((*MockSegmentHandlerService)(nil).ListSegments), varargs...)
}

// ReadSegment mocks base method.
func (m *MockSegmentHandlerService) ReadSegment(arg0 context.Context, arg1 *segment.ReadSegmentRequest, arg2 ...client.CallOption) (*segment.ReadSegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadSegment", varargs...)
	ret0, _ := ret[0].(*segment.ReadSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSegment indicates an expected call of ReadSegment.
func (mr *MockSegmentHandlerServiceMockRecorder) ReadSegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSegment", reflect.TypeOf((*MockSegmentHandlerService)(nil).ReadSegment), varargs...)
}

// UpdateSegment mocks base method.
func (m *MockSegmentHandlerService) UpdateSegment(arg0 context.Context, arg1 *segment.UpdateSegmentRequest, arg2 ...client.CallOption) (*segment.UpdateSegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSegment", varargs...)
	ret0, _ := ret[0].(*segment.UpdateSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentHandlerServiceMockRecorder) UpdateSegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegmentHandlerService)(nil).UpdateSegment), varargs...)
}
