// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tmds-io/masterdata/contract/category (interfaces: CategoryHandlerService)

// Package mock_category is a generated GoMock package.
package mock_category

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	category "github.com/tmds-io/masterdata/contract/category"
	client "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/client"
)

// MockCategoryHandlerService is a mock of CategoryHandlerService interface.
type MockCategoryHandlerService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryHandlerServiceMockRecorder
}

// MockCategoryHandlerServiceMockRecorder is the mock recorder for MockCategoryHandlerService.
type MockCategoryHandlerServiceMockRecorder struct {
	mock *MockCategoryHandlerService
}

// NewMockCategoryHandlerService creates a new mock instance.
func NewMockCategoryHandlerService(ctrl *gomock.Controller) *MockCategoryHandlerService {
	mock := &MockCategoryHandlerService{ctrl: ctrl}
	mock.recorder = &MockCategoryHandlerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryHandlerService) EXPECT() *MockCategoryHandlerServiceMockRecorder {
	return m.recorder
}

// AddChildCategoryValue mocks base method.
func (m *MockCategoryHandlerService) AddChildCategoryValue(arg0 context.Context, arg1 *category.AddChildCategoryValueRequest, arg2 ...client.CallOption) (*category.AddChildCategoryValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddChildCategoryValue", varargs...)
	ret0, _ := ret[0].(*category.AddChildCategoryValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChildCategoryValue indicates an expected call of AddChildCategoryValue.
func (mr *MockCategoryHandlerServiceMockRecorder) AddChildCategoryValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildCategoryValue", reflect.TypeOf((*MockCategoryHandlerService)(nil).AddChildCategoryValue), varargs...)
}

// CreateCategory mocks base method.
func (m *MockCategoryHandlerService) CreateCategory(arg0 context.Context, arg1 *category.CreateCategoryRequest, arg2 ...client.CallOption) (*category.CreateCategoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCategory", varargs...)
	ret0, _ := ret[0].(*category.CreateCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryHandlerServiceMockRecorder) CreateCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryHandlerService)(nil).CreateCategory), varargs...)
}

// DeleteCategory mocks base method.
func (m *MockCategoryHandlerService) DeleteCategory(arg0 context.Context, arg1 *category.DeleteCategoryRequest, arg2 ...client.CallOption) (*category.DeleteCategoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCategory", varargs...)
	ret0, _ := ret[0].(*category.DeleteCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryHandlerServiceMockRecorder) DeleteCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryHandlerService)(nil).DeleteCategory), varargs...)
}

// ReadCategory mocks base method.
func (m *MockCategoryHandlerService) ReadCategory(arg0 context.Context, arg1 *category.ReadCategoryRequest, arg2 ...client.CallOption) (*category.ReadCategoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadCategory", varargs...)
	ret0, _ := ret[0].(*category.ReadCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCategory indicates an expected call of ReadCategory.
func (mr *MockCategoryHandlerServiceMockRecorder) ReadCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCategory", reflect.TypeOf((*MockCategoryHandlerService)(nil).ReadCategory), varargs...)
}

// SearchCategories mocks base method.
func (m *MockCategoryHandlerService) SearchCategories(arg0 context.Context, arg1 *category.SearchCategoriesRequest, arg2 ...client.CallOption) (*category.SearchCategoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchCategories", varargs...)
	ret0, _ := ret[0].(*category.SearchCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCategories indicates an expected call of SearchCategories.
func (mr *MockCategoryHandlerServiceMockRecorder) SearchCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCategories", reflect.TypeOf((*MockCategoryHandlerService)(nil).SearchCategories), varargs...)
}

// UpdateCategory mocks base method.
func (m *MockCategoryHandlerService) UpdateCategory(arg0 context.Context, arg1 *category.UpdateCategoryRequest, arg2 ...client.CallOption) (*category.UpdateCategoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCategory", varargs...)
	ret0, _ := ret[0].(*category.UpdateCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryHandlerServiceMockRecorder) UpdateCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryHandlerService)(nil).UpdateCategory), varargs...)
}
