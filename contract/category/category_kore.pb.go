// Code generated by protoc-gen-kore. DO NOT EDIT.

package data_definition

import (
	context "context"
	_ "embed"
	constant "gitlab.com/tmds-io/core-model/hyperion/contract.git/v2/contract/constant"
	masker "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/masker"
	sanitizer "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/sanitizer"
	validator "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/core/validator"
	client "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/client"
	errors "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/errors"
	server "gitlab.com/tmds-io/core-model/hyperion/kore.git/v2/service/server"
)

// Client API for CategoryHandler service

const CategoryHandlerRegistryServiceName = constant.RegistryServiceName + ".category_handler"

type CategoryHandlerService interface {
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error)
	ReadCategory(ctx context.Context, in *ReadCategoryRequest, opts ...client.CallOption) (*ReadCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...client.CallOption) (*DeleteCategoryResponse, error)
	SearchCategories(ctx context.Context, in *SearchCategoriesRequest, opts ...client.CallOption) (*SearchCategoriesResponse, error)
	AddChildCategoryValue(ctx context.Context, in *AddChildCategoryValueRequest, opts ...client.CallOption) (*AddChildCategoryValueResponse, error)
}

type categoryHandlerService struct {
	c    client.Client
	name string
}

func NewCategoryHandlerService(name string, c client.Client) CategoryHandlerService {
	return &categoryHandlerService{
		c:    c,
		name: name,
	}
}

func NewCategoryHandlerServiceDefault(clt ...client.Client) CategoryHandlerService {
	if 0 == len(clt) {
		clt = []client.Client{client.DefaultClient}
	}
	return NewCategoryHandlerService(constant.RegistryServiceName, clt[0])
}

func NewCategoryHandlerServiceWithDefaultClient() CategoryHandlerService {
	return NewCategoryHandlerService(constant.RegistryServiceName, client.DefaultClient)
}

func (c *categoryHandlerService) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "CategoryHandler.CreateCategory", in)
	out := new(CreateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryHandlerService) ReadCategory(ctx context.Context, in *ReadCategoryRequest, opts ...client.CallOption) (*ReadCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "CategoryHandler.ReadCategory", in)
	out := new(ReadCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryHandlerService) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...client.CallOption) (*UpdateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "CategoryHandler.UpdateCategory", in)
	out := new(UpdateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryHandlerService) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...client.CallOption) (*DeleteCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "CategoryHandler.DeleteCategory", in)
	out := new(DeleteCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryHandlerService) SearchCategories(ctx context.Context, in *SearchCategoriesRequest, opts ...client.CallOption) (*SearchCategoriesResponse, error) {
	req := c.c.NewRequest(c.name, "CategoryHandler.SearchCategories", in)
	out := new(SearchCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryHandlerService) AddChildCategoryValue(ctx context.Context, in *AddChildCategoryValueRequest, opts ...client.CallOption) (*AddChildCategoryValueResponse, error) {
	req := c.c.NewRequest(c.name, "CategoryHandler.AddChildCategoryValue", in)
	out := new(AddChildCategoryValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CategoryHandler service

// CategoryHandlerHandler is the server API for CategoryHandler service.
type CategoryHandlerHandler interface {
	CreateCategory(context.Context, *CreateCategoryRequest, *CreateCategoryResponse) error
	ReadCategory(context.Context, *ReadCategoryRequest, *ReadCategoryResponse) error
	UpdateCategory(context.Context, *UpdateCategoryRequest, *UpdateCategoryResponse) error
	DeleteCategory(context.Context, *DeleteCategoryRequest, *DeleteCategoryResponse) error
	SearchCategories(context.Context, *SearchCategoriesRequest, *SearchCategoriesResponse) error
	AddChildCategoryValue(context.Context, *AddChildCategoryValueRequest, *AddChildCategoryValueResponse) error
}

func RegisterCategoryHandlerHandler(s server.Server, hdlr CategoryHandlerHandler, opts ...server.HandlerOption) error {
	type categoryHandler interface {
		CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error
		ReadCategory(ctx context.Context, in *ReadCategoryRequest, out *ReadCategoryResponse) error
		UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, out *UpdateCategoryResponse) error
		DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, out *DeleteCategoryResponse) error
		SearchCategories(ctx context.Context, in *SearchCategoriesRequest, out *SearchCategoriesResponse) error
		AddChildCategoryValue(ctx context.Context, in *AddChildCategoryValueRequest, out *AddChildCategoryValueResponse) error
	}
	type CategoryHandler struct {
		categoryHandler
	}
	h := &categoryHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&CategoryHandler{h}, opts...))
}

type categoryHandlerHandler struct {
	CategoryHandlerHandler
}

//go:embed validation/category_handler.create_category.yaml
var ValidationTplOfCreateCategoryRequest string

//go:embed mask/category_handler.create_category.yaml
var MaskOfCreateCategoryRequest string

func (in *CreateCategoryRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfCreateCategoryRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfCreateCategoryRequest))
}

//go:embed validation/category_handler.read_category.yaml
var ValidationTplOfReadCategoryRequest string

//go:embed mask/category_handler.read_category.yaml
var MaskOfReadCategoryRequest string

func (in *ReadCategoryRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfReadCategoryRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfReadCategoryRequest))
}

//go:embed validation/category_handler.update_category.yaml
var ValidationTplOfUpdateCategoryRequest string

//go:embed mask/category_handler.update_category.yaml
var MaskOfUpdateCategoryRequest string

func (in *UpdateCategoryRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfUpdateCategoryRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfUpdateCategoryRequest))
}

//go:embed validation/category_handler.delete_category.yaml
var ValidationTplOfDeleteCategoryRequest string

//go:embed mask/category_handler.delete_category.yaml
var MaskOfDeleteCategoryRequest string

func (in *DeleteCategoryRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfDeleteCategoryRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfDeleteCategoryRequest))
}

//go:embed validation/category_handler.search_categories.yaml
var ValidationTplOfSearchCategoriesRequest string

//go:embed mask/category_handler.search_categories.yaml
var MaskOfSearchCategoriesRequest string

func (in *SearchCategoriesRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfSearchCategoriesRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfSearchCategoriesRequest))
}

//go:embed validation/category_handler.add_child_category_value.yaml
var ValidationTplOfAddChildCategoryValueRequest string

//go:embed mask/category_handler.add_child_category_value.yaml
var MaskOfAddChildCategoryValueRequest string

func (in *AddChildCategoryValueRequest) Validate(ctx context.Context) error {
	if err := masker.ApplyFromYaml(in, MaskOfAddChildCategoryValueRequest, true); err != nil {
		return err
	}
	return errors.WrapValidation(validator.ValidateSchema(ctx, in, ValidationTplOfAddChildCategoryValueRequest))
}

func (h *categoryHandlerHandler) CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.CategoryHandlerHandler.CreateCategory(ctx, in, out)
}

func (h *categoryHandlerHandler) ReadCategory(ctx context.Context, in *ReadCategoryRequest, out *ReadCategoryResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.CategoryHandlerHandler.ReadCategory(ctx, in, out)
}

func (h *categoryHandlerHandler) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, out *UpdateCategoryResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.CategoryHandlerHandler.UpdateCategory(ctx, in, out)
}

func (h *categoryHandlerHandler) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, out *DeleteCategoryResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.CategoryHandlerHandler.DeleteCategory(ctx, in, out)
}

func (h *categoryHandlerHandler) SearchCategories(ctx context.Context, in *SearchCategoriesRequest, out *SearchCategoriesResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.CategoryHandlerHandler.SearchCategories(ctx, in, out)
}

func (h *categoryHandlerHandler) AddChildCategoryValue(ctx context.Context, in *AddChildCategoryValueRequest, out *AddChildCategoryValueResponse) error {
	sanitizer.Sanitize(in)
	if err := in.Validate(ctx); err != nil {
		return err
	}
	return h.CategoryHandlerHandler.AddChildCategoryValue(ctx, in, out)
}
